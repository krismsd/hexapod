from machine import I2C, Pin, UART
import time
import math

# Create I2C object
i2c = I2C(0, scl=Pin(17), sda=Pin(16))

# Print out any addresses found
# devices = i2c.scan()
# print(devices)
# if devices:
#     print(len(devices))
#     for d in devices:
#         print(hex(d))


from servo import Servos

servoBoard1 = Servos(i2c, 0x41)
servoBoard2 = Servos(i2c, 0x40)

# All lengths are only on x-axis assuming tibia + femur are lying flat y-axis (in their own perspective)
# It is assumed that leg is built so tibia is in line with coxa motion point (y differences cancel out)
coxaLength = 32.10 # Distance of coxa-body motion point to coxa-femur motion point
femurLength = 70 # Distance of femur-coxa motion point to femur-tibia motion point
tibiaLength = 100.12 # Distance of tibia-femur motion point to end of tibia

calibrationTimings = {
    'C0': [(150, 1759), (152, 1742), (154, 1714), (156, 1698), (158, 1670), (160, 1644), (162, 1621), (164, 1600), (166, 1573), (168, 1551), (170, 1521), (172, 1498), (174, 1471), (176, 1450), (178, 1424), (180, 1400), (182, 1374), (184, 1351), (186, 1332), (188, 1305), (190, 1282), (192, 1264), (194, 1238), (196, 1216), (198, 1187), (200, 1164), (202, 1144), (204, 1118), (206, 1094), (208, 1074), (210, 1049)],
    'F0': [(90, 636), (92, 657), (94, 679), (96, 705), (98, 725), (100, 742), (102, 767), (104, 799), (106, 818), (108, 830), (110, 856), (112, 873), (114, 901), (116, 922), (118, 940), (120, 966), (122, 986), (124, 1008), (126, 1021), (128, 1053), (130, 1074), (132, 1099), (134, 1118), (136, 1136), (138, 1157), (140, 1181), (142, 1209), (144, 1229), (146, 1257), (148, 1283), (150, 1306), (152, 1327), (154, 1354), (156, 1367), (158, 1392), (160, 1424), (162, 1446), (164, 1469), (166, 1489), (168, 1515), (170, 1535), (172, 1558), (174, 1581), (176, 1601), (178, 1622), (180, 1644), (182, 1670), (184, 1690), (186, 1714), (188, 1730), (190, 1757), (192, 1778), (194, 1795), (196, 1818), (198, 1842), (200, 1868), (202, 1889), (204, 1906), (206, 1927), (208, 1948), (210, 1966), (212, 1988), (214, 2008), (216, 2032), (218, 2056), (220, 2074), (222, 2092), (224, 2112), (226, 2132), (228, 2148), (230, 2172), (232, 2199), (234, 2214), (236, 2233), (238, 2249), (240, 2277), (242, 2293), (244, 2309), (246, 2327), (248, 2349), (250, 2366), (252, 2389), (254, 2405), (256, 2426), (258, 2440), (260, 2463), (262, 2477)],
    'T0': [(30, 2475), (32, 2465), (34, 2447), (36, 2427), (38, 2397), (40, 2374), (42, 2360), (44, 2334), (46, 2315), (48, 2297), (50, 2275), (52, 2254), (54, 2234), (56, 2210), (58, 2184), (60, 2162), (62, 2142), (64, 2120), (66, 2101), (68, 2072), (70, 2055), (72, 2037), (74, 2016), (76, 1997), (78, 1967), (80, 1950), (82, 1928), (84, 1902), (86, 1880), (88, 1854), (90, 1828), (92, 1806), (94, 1791), (96, 1770), (98, 1746), (100, 1721), (102, 1704), (104, 1677), (106, 1652), (108, 1632), (110, 1605), (112, 1579), (114, 1561), (116, 1536), (118, 1515), (120, 1492), (122, 1464), (124, 1440), (126, 1419), (128, 1397), (130, 1372), (132, 1347), (134, 1318), (136, 1293), (138, 1275), (140, 1258), (142, 1232), (144, 1206), (146, 1180), (148, 1157), (150, 1128), (152, 1112), (154, 1092), (156, 1066), (158, 1044), (160, 1023), (162, 1007), (164, 987), (166, 963), (168, 946), (170, 925), (172, 903), (174, 883), (176, 864), (178, 837), (180, 820), (182, 801), (184, 776), (186, 757), (188, 734), (190, 712), (192, 694), (194, 672), (196, 649), (198, 626), (200, 610), (202, 590), (204, 572), (206, 551), (208, 531), (210, 508)],

    'C1': [(150, 1926), (152, 1912), (154, 1880), (156, 1865), (158, 1842), (160, 1820), (162, 1797), (164, 1779), (166, 1759), (168, 1731), (170, 1696), (172, 1674), (174, 1650), (176, 1629), (178, 1605), (180, 1587), (182, 1562), (184, 1540), (186, 1507), (188, 1483), (190, 1466), (192, 1440), (194, 1414), (196, 1387), (198, 1363), (200, 1340), (202, 1327), (204, 1305), (206, 1281), (208, 1259), (210, 1235)],
    'F1': [(90, 467), (92, 480), (94, 505), (96, 526), (98, 546), (100, 567), (102, 586), (104, 615), (106, 636), (108, 656), (110, 675), (112, 700), (114, 720), (116, 744), (118, 764), (120, 787), (122, 805), (124, 822), (126, 844), (128, 875), (130, 891), (132, 914), (134, 939), (136, 961), (138, 975), (140, 1002), (142, 1018), (144, 1040), (146, 1056), (148, 1081), (150, 1100), (152, 1123), (154, 1145), (156, 1169), (158, 1192), (160, 1207), (162, 1230), (164, 1260), (166, 1287), (168, 1307), (170, 1322), (172, 1353), (174, 1370), (180, 1444), (182, 1458), (184, 1479), (186, 1505), (188, 1522), (190, 1546), (192, 1564), (194, 1590), (196, 1610), (198, 1637), (200, 1659), (202, 1677), (204, 1700), (206, 1722), (208, 1738), (210, 1769), (212, 1781), (214, 1803), (216, 1826), (218, 1842), (220, 1864), (222, 1889), (224, 1910), (226, 1926), (228, 1938), (230, 1966), (232, 1993), (234, 2010), (236, 2028), (238, 2046), (240, 2068), (242, 2090), (244, 2119), (246, 2129), (248, 2152), (250, 2174), (252, 2195), (254, 2210), (256, 2236), (258, 2255), (260, 2273), (262, 2293), (264, 2317), (266, 2337), (268, 2358), (270, 2383)],
    'T1': [(30, 2390), (32, 2374), (34, 2353), (36, 2335), (38, 2315), (40, 2296), (42, 2279), (44, 2258), (46, 2237), (48, 2214), (50, 2193), (52, 2173), (54, 2148), (56, 2125), (58, 2108), (60, 2091), (62, 2071), (64, 2047), (66, 2023), (68, 1998), (70, 1979), (72, 1957), (74, 1936), (76, 1913), (78, 1894), (80, 1871), (82, 1850), (84, 1828), (86, 1803), (88, 1781), (90, 1757), (92, 1733), (94, 1711), (96, 1687), (98, 1661), (100, 1636), (102, 1612), (104, 1587), (106, 1568), (108, 1542), (110, 1520), (112, 1501), (114, 1476), (116, 1451), (118, 1423), (120, 1398), (122, 1374), (124, 1357), (126, 1332), (128, 1310), (130, 1286), (132, 1264), (134, 1235), (136, 1208), (138, 1185), (140, 1164), (142, 1140), (144, 1120), (146, 1099), (148, 1069), (150, 1048), (152, 1029), (154, 1009), (156, 982), (158, 953), (160, 937), (162, 923), (164, 898), (166, 880), (168, 858), (170, 833), (172, 809), (174, 788), (176, 765), (178, 746), (180, 723), (182, 703), (184, 682), (186, 658), (188, 638), (190, 612), (192, 589), (194, 567), (196, 545), (198, 524), (200, 500), (202, 481)],

    'C2': [(150, 1883), (152, 1871), (154, 1847), (156, 1828), (158, 1809), (160, 1786), (162, 1760), (164, 1735), (166, 1721), (168, 1697), (170, 1672), (172, 1651), (174, 1627), (176, 1604), (178, 1575), (180, 1558), (182, 1532), (184, 1509), (186, 1483), (188, 1458), (190, 1438), (192, 1414), (194, 1389), (196, 1366), (198, 1345), (200, 1318), (202, 1290), (204, 1271), (206, 1244), (208, 1225), (210, 1204)],
    'F2': [(90, 500), (92, 521), (94, 534), (96, 560), (98, 575), (100, 596), (102, 615), (104, 635), (106, 657), (108, 679), (110, 699), (112, 721), (114, 741), (116, 766), (118, 789), (120, 811), (122, 831), (124, 851), (126, 872), (128, 896), (130, 912), (132, 935), (134, 955), (136, 977), (138, 996), (140, 1021), (142, 1041), (144, 1062), (146, 1089), (148, 1115), (150, 1140), (152, 1154), (154, 1184), (156, 1209), (158, 1233), (160, 1254), (162, 1281), (164, 1304), (166, 1331), (168, 1351), (170, 1373), (172, 1391), (174, 1418), (176, 1445), (178, 1465), (180, 1489), (182, 1512), (184, 1541), (186, 1567), (188, 1589), (190, 1611), (192, 1627), (194, 1644), (196, 1670), (198, 1694), (200, 1714), (202, 1733), (204, 1758), (206, 1773), (208, 1804), (210, 1819), (212, 1843), (214, 1873), (216, 1896), (218, 1915), (220, 1938), (222, 1961), (224, 1977), (226, 2004), (228, 2025), (230, 2044), (232, 2064), (234, 2090), (236, 2110), (238, 2128), (240, 2151), (242, 2168), (244, 2189), (246, 2217), (248, 2234), (250, 2247), (252, 2271), (254, 2294), (256, 2318), (258, 2337), (260, 2358), (262, 2380), (264, 2400), (266, 2410), (268, 2436), (270, 2452)],
    'T2': [(30, 2337), (32, 2329), (34, 2318), (36, 2294), (38, 2268), (40, 2250), (42, 2230), (44, 2213), (46, 2193), (48, 2170), (50, 2150), (52, 2132), (54, 2099), (56, 2073), (58, 2058), (60, 2037), (62, 2017), (64, 1998), (66, 1976), (68, 1955), (70, 1935), (72, 1909), (74, 1886), (76, 1867), (78, 1848), (80, 1828), (82, 1807), (84, 1784), (86, 1767), (88, 1748), (90, 1727), (92, 1710), (94, 1686), (96, 1663), (98, 1634), (100, 1616), (102, 1595), (104, 1575), (106, 1545), (108, 1527), (110, 1504), (112, 1482), (114, 1463), (116, 1441), (118, 1416), (120, 1396), (122, 1370), (124, 1343), (126, 1323), (128, 1300), (130, 1280), (132, 1252), (134, 1231), (136, 1208), (138, 1186), (140, 1165), (142, 1147), (144, 1126), (146, 1106), (148, 1080), (150, 1056), (152, 1037), (154, 1015), (156, 990), (158, 968), (160, 947), (162, 927), (164, 904), (166, 886), (168, 863), (170, 844), (172, 821), (174, 804), (176, 782), (178, 755), (180, 741), (182, 722), (184, 701), (186, 684), (188, 658), (190, 642), (192, 616), (194, 588), (196, 577), (198, 556), (200, 534), (202, 513), (204, 492), (206, 468)],

    'C3': [(150, 1808), (152, 1794), (154, 1768), (156, 1747), (158, 1727), (160, 1700), (162, 1676), (164, 1651), (166, 1626), (168, 1602), (170, 1580), (172, 1559), (174, 1533), (176, 1510), (178, 1486), (180, 1461), (182, 1436), (184, 1412), (186, 1389), (188, 1364), (190, 1337), (192, 1312), (194, 1289), (196, 1266), (198, 1242), (200, 1223), (202, 1197), (204, 1169), (206, 1149), (208, 1125), (210, 1102)],
    'F3': [(90, 494), (92, 513), (94, 538), (96, 557), (98, 576), (100, 602), (102, 619), (104, 640), (106, 666), (108, 691), (110, 707), (112, 729), (114, 752), (116, 769), (118, 785), (120, 804), (122, 829), (124, 850), (126, 875), (128, 894), (130, 919), (132, 941), (134, 961), (136, 978), (138, 1008), (140, 1028), (142, 1050), (144, 1070), (146, 1092), (148, 1116), (150, 1142), (152, 1175), (154, 1196), (156, 1210), (158, 1233), (160, 1250), (162, 1271), (164, 1294), (166, 1320), (168, 1348), (170, 1370), (172, 1394), (174, 1415), (176, 1435), (178, 1459), (180, 1497), (182, 1518), (184, 1530), (186, 1560), (188, 1587), (190, 1610), (192, 1634), (194, 1651), (196, 1679), (198, 1699), (200, 1718), (202, 1743), (204, 1764), (206, 1784), (208, 1802), (210, 1831), (212, 1851), (214, 1883), (216, 1899), (218, 1922), (220, 1944), (222, 1964), (224, 1981), (226, 2002), (228, 2021), (230, 2043), (232, 2065), (234, 2082), (236, 2112), (238, 2133), (240, 2150), (242, 2169), (244, 2191), (246, 2209), (248, 2233), (250, 2248), (252, 2268), (254, 2287), (256, 2302), (258, 2323), (260, 2342), (262, 2365), (264, 2388), (266, 2406), (268, 2424), (270, 2439)],
    'T3': [(30, 2276), (32, 2263), (34, 2244), (36, 2222), (38, 2195), (40, 2171), (42, 2156), (44, 2132), (46, 2107), (48, 2087), (50, 2066), (52, 2048), (54, 2026), (56, 2007), (58, 1982), (60, 1960), (62, 1941), (64, 1922), (66, 1904), (68, 1881), (70, 1862), (72, 1841), (74, 1819), (76, 1794), (78, 1771), (80, 1747), (82, 1727), (84, 1703), (86, 1688), (88, 1668), (90, 1643), (92, 1621), (94, 1597), (96, 1579), (98, 1556), (100, 1534), (102, 1508), (104, 1483), (106, 1461), (108, 1440), (110, 1414), (112, 1391), (114, 1372), (116, 1351), (118, 1321), (120, 1298), (122, 1281), (124, 1258), (126, 1235), (128, 1208), (130, 1187), (132, 1166), (134, 1144), (136, 1122), (138, 1098), (140, 1074), (142, 1054), (144, 1028), (146, 1006), (148, 985), (150, 963), (152, 944), (154, 919), (156, 897), (158, 873), (160, 853), (162, 833), (164, 809), (166, 789), (168, 770), (170, 743), (172, 719), (174, 696), (176, 671), (178, 652), (180, 633), (182, 611), (184, 588), (186, 570), (188, 544), (190, 528), (192, 504), (194, 476)],

    'C4': [(150, 1814), (152, 1803), (154, 1780), (156, 1752), (158, 1729), (160, 1701), (162, 1679), (164, 1656), (166, 1633), (168, 1602), (170, 1577), (172, 1554), (174, 1528), (176, 1503), (178, 1480), (180, 1454), (182, 1422), (184, 1396), (186, 1374), (188, 1348), (190, 1329), (192, 1297), (194, 1272), (196, 1249), (198, 1230), (200, 1204), (202, 1170), (204, 1149), (206, 1124), (208, 1102), (210, 1079)],
    'F4': [(98, 499), (100, 541), (102, 558), (104, 580), (106, 608), (108, 635), (110, 653), (112, 676), (114, 700), (116, 712), (118, 734), (120, 759), (122, 782), (124, 799), (126, 818), (128, 845), (130, 869), (132, 877), (134, 903), (136, 930), (138, 950), (140, 977), (142, 1001), (144, 1020), (146, 1041), (148, 1061), (150, 1087), (152, 1108), (154, 1126), (156, 1148), (158, 1171), (160, 1192), (162, 1216), (164, 1242), (166, 1263), (168, 1287), (170, 1313), (172, 1337), (174, 1362), (176, 1387), (178, 1408), (180, 1437), (182, 1459), (184, 1484), (186, 1505), (188, 1529), (190, 1552), (192, 1579), (194, 1608), (196, 1623), (198, 1651), (200, 1678), (202, 1705), (204, 1734), (206, 1747), (208, 1772), (210, 1800), (212, 1822), (214, 1848), (216, 1862), (218, 1887), (220, 1903), (222, 1921), (224, 1947), (226, 1972), (228, 1990), (230, 2008), (232, 2033), (234, 2048), (236, 2080), (238, 2093), (240, 2114), (242, 2133), (244, 2154), (246, 2172), (248, 2189), (250, 2210), (252, 2233), (254, 2253), (256, 2271), (258, 2292), (260, 2317), (262, 2335), (264, 2355), (266, 2380), (268, 2400), (270, 2424)],
    'T4': [(30, 2344), (32, 2336), (34, 2317), (36, 2295), (38, 2277), (40, 2255), (42, 2232), (44, 2213), (46, 2192), (48, 2170), (50, 2149), (52, 2132), (54, 2109), (56, 2084), (58, 2065), (60, 2046), (62, 2023), (64, 1999), (66, 1980), (68, 1957), (70, 1933), (72, 1911), (74, 1892), (76, 1871), (78, 1848), (80, 1825), (82, 1804), (84, 1781), (86, 1765), (88, 1737), (90, 1711), (92, 1688), (94, 1668), (96, 1646), (98, 1623), (100, 1602), (102, 1583), (104, 1556), (106, 1528), (108, 1505), (110, 1480), (112, 1456), (114, 1433), (116, 1414), (118, 1390), (120, 1366), (122, 1345), (124, 1325), (126, 1303), (128, 1274), (130, 1252), (132, 1235), (134, 1211), (136, 1182), (138, 1159), (140, 1134), (142, 1113), (144, 1091), (146, 1074), (148, 1046), (150, 1028), (152, 1001), (154, 981), (156, 963), (158, 939), (160, 919), (162, 897), (164, 873), (166, 851), (168, 832), (170, 807), (172, 786), (174, 767), (176, 746), (178, 725), (180, 699), (182, 675), (184, 648), (186, 630), (188, 609), (190, 587), (192, 567), (194, 543), (196, 527), (198, 504), (200, 476)],

    'C5': [(150, 1963), (152, 1944), (154, 1927), (156, 1905), (158, 1882), (160, 1864), (162, 1841), (164, 1820), (166, 1796), (168, 1778), (170, 1747), (172, 1735), (174, 1704), (176, 1679), (178, 1658), (180, 1639), (182, 1617), (184, 1590), (186, 1560), (188, 1537), (190, 1516), (192, 1495), (194, 1475), (196, 1452), (198, 1429), (200, 1399), (202, 1376), (204, 1350), (206, 1324), (208, 1300), (210, 1273)],
    'F5': [(94, 478), (96, 513), (98, 533), (100, 552), (102, 570), (104, 594), (106, 611), (108, 633), (110, 655), (112, 676), (114, 701), (116, 724), (118, 748), (120, 772), (122, 798), (124, 821), (126, 838), (128, 856), (130, 879), (132, 905), (134, 925), (136, 948), (138, 973), (140, 995), (142, 1013), (144, 1040), (146, 1061), (148, 1076), (150, 1101), (152, 1125), (154, 1144), (156, 1165), (158, 1188), (160, 1214), (162, 1243), (164, 1266), (166, 1285), (168, 1308), (170, 1330), (172, 1353), (174, 1380), (176, 1399), (178, 1425), (180, 1447), (182, 1469), (184, 1495), (186, 1516), (188, 1539), (190, 1558), (192, 1582), (194, 1606), (196, 1624), (198, 1643), (200, 1667), (202, 1687), (204, 1711), (206, 1734), (208, 1748), (210, 1769), (212, 1790), (214, 1807), (216, 1830), (218, 1854), (220, 1872), (222, 1892), (224, 1912), (226, 1932), (228, 1960), (230, 1981), (232, 1997), (234, 2022), (236, 2043), (238, 2056), (240, 2080), (242, 2098), (244, 2121), (246, 2143), (248, 2163), (250, 2180), (252, 2202), (254, 2223), (256, 2240), (258, 2267), (260, 2283), (262, 2303), (264, 2324), (266, 2342), (268, 2360), (270, 2377)],
    'T5': [(30, 2493), (32, 2481), (34, 2464), (36, 2446), (38, 2425), (40, 2410), (42, 2390), (44, 2368), (46, 2353), (48, 2331), (50, 2307), (52, 2286), (54, 2267), (56, 2248), (58, 2227), (60, 2204), (62, 2187), (64, 2169), (66, 2150), (68, 2126), (70, 2106), (72, 2087), (74, 2063), (76, 2042), (78, 2025), (80, 2002), (82, 1984), (84, 1958), (86, 1933), (88, 1913), (90, 1891), (92, 1861), (94, 1847), (96, 1833), (98, 1809), (100, 1786), (102, 1764), (104, 1744), (106, 1714), (108, 1691), (110, 1669), (112, 1644), (114, 1624), (116, 1608), (118, 1584), (120, 1553), (122, 1528), (124, 1501), (126, 1482), (128, 1457), (130, 1435), (132, 1407), (134, 1384), (136, 1357), (138, 1332), (140, 1308), (142, 1284), (144, 1262), (146, 1240), (148, 1218), (150, 1187), (152, 1165), (154, 1144), (156, 1120), (158, 1098), (160, 1076), (162, 1054), (164, 1031), (166, 1007), (168, 985), (170, 958), (172, 938), (174, 919), (176, 891), (178, 862), (180, 842), (182, 825), (184, 801), (186, 777), (188, 754), (190, 735), (192, 709), (194, 685), (196, 665), (198, 647), (200, 628), (202, 608), (204, 587), (206, 564), (208, 543), (210, 520)],
}

class RobotLegPart:
    def __init__(self, pwmBoard: Servos, boardChannel: int, timingSamples, degreesOffset) -> None:
        self.pwmBoard = pwmBoard
        self.boardChannel = boardChannel

        self.samples = timingSamples

        # TODO: for sake of degrees calc put next degrees samples ms in the previous angles data
        #   mem is cheap, save on dict lookups

        self.smallestAngle = self.samples[0][0]
        self.largestAngle = self.samples[-1][0]

        self.sampleStep = 2

        self.nextUs = None

        # self.lowerLimitDegrees = lowerLimit
        # self.upperLimitDegrees = upperLimit
        self.degreesOffset = degreesOffset
        
        # sortedSamples = sorted(timingSamples, key=lambda l: l[0])
        # windowDegrees = sortedSamples[-1][0] - sortedSamples[0][0]
        # windowUs = sortedSamples[-1][1] - sortedSamples[0][1]
        # self.usPerDegree = windowUs / windowDegrees
        # # Calc us for lowerLimit
        # self.baseUs = sortedSamples[0][1] - (self.usPerDegree * (sortedSamples[0][0] - lowerLimit))  

    def setNextAngle(self, degrees=None, radians=None, us=None):
        if radians is not None:
            degrees = math.degrees(radians)
        if degrees is not None:
            degrees += self.degreesOffset
            us = self.msFromDegrees(degrees)

            # us = self.baseUs + (self.usPerDegree * (degrees - self.lowerLimitDegrees))
        self.nextUs = us

    def msFromDegrees(self, degrees):
        lowIdx = int((degrees - self.smallestAngle) / self.sampleStep)
        
        if lowIdx < 0 or lowIdx > len(self.samples) - 2:
            raise Exception("Angle out of bounds")

        lowDegree, lowMs = self.samples[lowIdx]
        highDegree, highMs = self.samples[lowIdx + 1]

        fade = (degrees - lowDegree) / (highDegree - lowDegree) # Percent our degree is between the 2 surrounding samples 
        return round((highMs - lowMs) * fade + lowMs)

    def commitAngle(self):
        self.pwmBoard.position(self.boardChannel, us=self.nextUs)

    def release(self):
        self.pwmBoard.release(self.boardChannel)


class RobotLeg:
    def __init__(self, coxa: RobotLegPart, femur: RobotLegPart, tibia: RobotLegPart) -> None:
        self.coxa = coxa
        self.femur = femur
        self.tibia = tibia
        self.allParts = [coxa, femur, tibia]

    def setNextPosition(self, x, y, z):
        (coxaRads, femurRads, tibiaRads) = legIkFromCoords(x, y, z)
        # raise Exception("C:{},F:{},T:{}".format(math.degrees(coxaRads), math.degrees(femurRads), math.degrees(tibiaRads)))
        self.coxa.setNextAngle(radians=coxaRads)
        self.femur.setNextAngle(radians=femurRads)
        self.tibia.setNextAngle(radians=tibiaRads)

    def commitJoints(self):
        self.coxa.commitAngle()
        self.femur.commitAngle()
        self.tibia.commitAngle()
    

# From the top perspective of the leg sitting straight outwards from the body 
# x = distance from coxa servo of tibia end (in/out)
# y: distance left/right of tibia end from coxa servo at neutral position
# z: distance up/down of tibia end from coxa servo
def legIkFromCoords(x, y, z):
    # Ripped from: https://oscarliang.com/inverse-kinematics-and-trigonometry-basics/
    gamma = math.atan(x / y)

    L1 = math.sqrt(x**2 + y**2)
    L = math.sqrt(z ** 2 + (L1 - coxaLength) ** 2)
    a1 = math.acos((z) / L)
    a2 = math.acos((tibiaLength ** 2 - femurLength ** 2 - L ** 2) / (-2 * femurLength * L))
    alpha = a1 + a2
    beta = math.acos((L ** 2 - tibiaLength ** 2 - femurLength ** 2) / (-2 * tibiaLength * femurLength))

    return (gamma, alpha, beta)

    # adjust beta by 2.749 degrees as tibia end sits 1.727mm below tibia-femur joint
    ## servo should be calibrated to eliminate this but note tibia length then is not 100mm

    # return (math.degrees(gamma), 90 - math.degrees(alpha), 180 - math.degrees(beta) - 2.749)




def createLeg(pwmBoard, channelGroupNum, legIdx):
    return RobotLeg(
        RobotLegPart(pwmBoard, (channelGroupNum * 3) + 0, calibrationTimings['C' + str(legIdx)], 180),
        RobotLegPart(pwmBoard, (channelGroupNum * 3) + 1, calibrationTimings['F' + str(legIdx)], 90),
        RobotLegPart(pwmBoard, (channelGroupNum * 3) + 2, calibrationTimings['T' + str(legIdx)], 0),
    )

legs = [
    createLeg(servoBoard1, 0, 0),
    createLeg(servoBoard1, 1, 1),
    createLeg(servoBoard1, 2, 2),
    createLeg(servoBoard2, 0, 3),
    createLeg(servoBoard2, 1, 4),
    createLeg(servoBoard2, 2, 5),
]

# def motionStretchLegs():
#     for leg in legs:
#         leg.coxa.setAngle(90)

#         # Lift femur a bit higher to allow tibia to move into place
#         leg.femur.setAngle(90+60)
#         time.sleep_ms(500)
        
#         leg.tibia.setAngle(45)
#         time.sleep_ms(300)
#         leg.femur.setAngle(90)
#         time.sleep_ms(500)

# def motionStandUp():
#     # Stand up
#     for leg in legs:
#         leg.coxa.setAngle(degrees=90)
#         leg.femur.setAngle(degrees=90+45)
#         leg.tibia.setAngle(degrees=180)
#         time.sleep(0.5)

def motionReleaseAll():
    for leg in legs:
        for part in leg.allParts:
            part.release()


import sys

while True:
    command = sys.stdin.readline()
    if command is None:
        continue
    try:
        command = str(command)
        command = command.strip()

        if command == "hello":
            sys.stdout.write(b"ahoy\n")

        elif command == "release":
            motionReleaseAll()

        # elif command == "stand":
        #     motionStandUp()

        # elif command == "stretch":
        #     motionStretchLegs()

        elif command.startswith("jointmove"):
            parts = command.split(" ")
            index = int(parts[1])
            us = int(parts[2])

            servoBoard1.position(index, us=us)

        elif command.startswith("legjointangle"):
            parts = command.split(" ")
            legIdx = int(parts[1])
            jointIdx = int(parts[2])
            degrees = int(parts[3])

            joint = legs[legIdx].allParts[jointIdx] 
            joint.setNextAngle(degrees=degrees)
            joint.commitAngle()

        elif command.startswith("legik"):
            parts = command.split(" ")
            legIdx = int(parts[1])
            x = int(parts[2])
            y = int(parts[3])
            z = int(parts[4])
            skipCommit = parts[5] == "1" 

            leg = legs[legIdx]
            leg.setNextPosition(x, y, z)
            if not skipCommit:
                leg.commitJoints()

        elif command.startswith("commit"):
            parts = command.split(" ")
            legIdx = int(parts[1])
            legs = legs if legIdx == -1 else [legs[legIdx]]
            for leg in legs:
                leg.commitJoints()

        else:
            raise Exception("Command not found")

        sys.stdout.write(b"ack\n")
    except Exception as e:
        sys.stdout.write(("error " + str(e) +"\n").encode())



# # Spin me right round baby
# rotateGroups = [[legs[0],legs[2],legs[4]], [legs[1],legs[3],legs[5]]]
# a = True
# while True:
#     groundLegs = rotateGroups[0 if a else 1]
#     airLegs = rotateGroups[1 if a else 0]

#     # lift air legs and reset turn
#     for leg in airLegs:
#         leg.femur.setAngle(degrees=90 + 90)
#     time.sleep_ms(500)
#     for leg in airLegs:
#         leg.coxa.setAngle(degrees=90)

#     time.sleep_ms(500)

#     # turn ground legs
#     for leg in groundLegs:
#         leg.coxa.setAngle(degrees=90+20)

#     time.sleep_ms(500)

#     # lower air legs
#     for leg in airLegs:
#         leg.femur.setAngle(degrees=90+45)

#     time.sleep_ms(500)
#     a = not a





# And stop
# for leg in legs:
#     for part in leg.allParts:
#         part.release()

# # Wave Coxa's
# a = True
# while True:
#     for leg in legs:
#         leg.coxa.setAngle(90-45 if a else 90+45)
#         time.sleep(1)
#     a = not a

# while True:
#     time.sleep(1)

# a = True

# while True:
#     for leg in legs:
#         leg.


# a = True

# led = Pin(25, Pin.OUT)

# button = Pin(18, Pin.IN, Pin.PULL_DOWN)

# isStill = False

# while True:
#     print("loop")
#     if button.value():
#         print("Button pressed")
#         isStill = not isStill

#     led.value(isStill)
#     # led.toggle()

#     # Knee
#     servoBoard1.position(0, degrees=45 if isStill else 0 if a else 180)
#     servoBoard2.position(0, degrees=45 if isStill else 0 if a else 180)
    
#     # Thigh
#     servoBoard1.position(1, degrees=90 if isStill else 90-45 if a else 90+45)
#     servoBoard2.position(1, degrees=90 if isStill else 90-45 if a else 90+45)

#     # Hip
#     servoBoard1.position(2, degrees=90 if isStill else 90-45 if a else 90+45)
#     servoBoard2.position(2, degrees=90 if isStill else 90-45 if a else 90+45)

#     # for i in range(9):
#     #     degrees = 90 if isStill else 30 if a else 150
#     #     servoBoard1.position(i, degrees=degrees)
#     #     # servoBoard2.position(i, degrees=(30 if a else 150))
#     a = not a
#     time.sleep(2)

# while True:
#     servoBoard1.position(1, degrees=(30 if a else 150))
#     a = not a
#     time.sleep(1)